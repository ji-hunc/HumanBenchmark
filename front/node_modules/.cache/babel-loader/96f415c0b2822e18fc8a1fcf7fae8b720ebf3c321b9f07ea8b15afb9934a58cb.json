{"ast":null,"code":"var _jsxFileName = \"/Users/jihun/workspace/humanbenchmark/src/components/Matrix/Matrix.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport React from 'react';\nimport * as style from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Matrix() {\n  _s();\n  const [answer, setAnswer] = useState('');\n  const [level, setLevel] = useState(1);\n  const [clickCount, setClickCount] = useState(0);\n  const blockRefs = useRef([]);\n  const [question, setQuestion] = useState('135792468');\n  const row1 = [1, 2, 3].map(index => /*#__PURE__*/_jsxDEV(style.Square, {\n    onClick: event => handleBlockClick(event, index),\n    ref: el => blockRefs.current[index] = el\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this));\n  const row2 = [4, 5, 6].map(index => /*#__PURE__*/_jsxDEV(style.Square, {\n    onClick: event => handleBlockClick(event, index),\n    ref: el => blockRefs.current[index] = el\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this));\n  const row3 = [7, 8, 9].map(index => /*#__PURE__*/_jsxDEV(style.Square, {\n    onClick: event => handleBlockClick(event, index),\n    ref: el => blockRefs.current[index] = el\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this));\n  const handleBlockClick = (event, index) => {\n    console.log('question: ', question[clickCount], 'index: ', index);\n    if (question[clickCount] != index) {\n      setClickCount(0);\n      setLevel(0);\n      console.log('GameOver');\n      // TODO GameOver시 처리할 프로세스 작성해야함\n    }\n\n    event.target.style.backgroundColor = '#fff';\n    event.target.style.opacity = 0.8;\n    setTimeout(() => {\n      event.target.style.backgroundColor = 'rgb(0, 0, 102)';\n      event.target.style.opacity = 0.15;\n    }, 300);\n    console.log('clickCount: ', clickCount, 'level: ', level);\n    if (clickCount + 1 == level) {\n      console.log('You Win!');\n      setLevel(state => state + 1);\n      setClickCount(0);\n    }\n    setClickCount(state => state + 1);\n  };\n  const showQuestion = index => {\n    if (index >= level) {\n      console.log('return');\n      return;\n    }\n    console.log('index: ', index, 'level: ', level);\n    blockRefs.current[question[index]].style.backgroundColor = '#fff';\n    blockRefs.current[question[index]].style.opacity = 0.8;\n    setTimeout(() => {\n      blockRefs.current[question[index]].style.backgroundColor = 'rgb(0, 0, 102)';\n      blockRefs.current[question[index]].style.opacity = 0.15;\n      showQuestion(index + 1);\n    }, 500);\n  };\n  const startGame = index => {\n    showQuestion(index);\n  };\n\n  // function highlightSequence(index) {\n  //   if (index >= sequence.length) {\n  //     // If end of sequence is reached, allow player to start inputting sequence\n  //     enableInput();\n  //     return;\n  //   }\n\n  //   // Highlight tile\n  //   const tile = sequence[index];\n  //   tile.classList.add('selected');\n\n  //   // Wait for short delay and then unhighlight tile\n  //   setTimeout(() => {\n  //     tile.classList.remove('selected');\n\n  //     // Recursively highlight next tile in sequence\n  //     highlightSequence(index + 1);\n  //   }, 500);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(style.Squares, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => startGame(0),\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(style.SquareRow, {\n      children: row1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(style.SquareRow, {\n      children: row2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(style.SquareRow, {\n      children: row3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Matrix, \"CZIYf9wNO7xoTDC40BlqFajvgTs=\");\n_c = Matrix;\nvar _c;\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["useState","useRef","React","style","jsxDEV","_jsxDEV","Matrix","_s","answer","setAnswer","level","setLevel","clickCount","setClickCount","blockRefs","question","setQuestion","row1","map","index","Square","onClick","event","handleBlockClick","ref","el","current","fileName","_jsxFileName","lineNumber","columnNumber","row2","row3","console","log","target","backgroundColor","opacity","setTimeout","state","showQuestion","startGame","Squares","children","SquareRow","_c","$RefreshReg$"],"sources":["/Users/jihun/workspace/humanbenchmark/src/components/Matrix/Matrix.js"],"sourcesContent":["import { useState, useRef } from 'react';\nimport React from 'react';\nimport * as style from './styles';\n\nexport default function Matrix() {\n  const [answer, setAnswer] = useState('');\n  const [level, setLevel] = useState(1);\n  const [clickCount, setClickCount] = useState(0);\n  const blockRefs = useRef([]);\n  const [question, setQuestion] = useState('135792468');\n\n  const row1 = [1, 2, 3].map((index) => (\n    <style.Square\n      key={index}\n      onClick={(event) => handleBlockClick(event, index)}\n      ref={(el) => (blockRefs.current[index] = el)}\n    />\n  ));\n  const row2 = [4, 5, 6].map((index) => (\n    <style.Square\n      key={index}\n      onClick={(event) => handleBlockClick(event, index)}\n      ref={(el) => (blockRefs.current[index] = el)}\n    />\n  ));\n  const row3 = [7, 8, 9].map((index) => (\n    <style.Square\n      key={index}\n      onClick={(event) => handleBlockClick(event, index)}\n      ref={(el) => (blockRefs.current[index] = el)}\n    />\n  ));\n\n  const handleBlockClick = (event, index) => {\n    console.log('question: ', question[clickCount], 'index: ', index);\n    if (question[clickCount] != index) {\n      setClickCount(0);\n      setLevel(0);\n      console.log('GameOver');\n      // TODO GameOver시 처리할 프로세스 작성해야함\n    }\n    event.target.style.backgroundColor = '#fff';\n    event.target.style.opacity = 0.8;\n    setTimeout(() => {\n      event.target.style.backgroundColor = 'rgb(0, 0, 102)';\n      event.target.style.opacity = 0.15;\n    }, 300);\n    console.log('clickCount: ', clickCount, 'level: ', level);\n    if (clickCount + 1 == level) {\n      console.log('You Win!');\n      setLevel((state) => state + 1);\n      setClickCount(0);\n    }\n    setClickCount((state) => state + 1);\n  };\n\n  const showQuestion = (index) => {\n    if (index >= level) {\n      console.log('return');\n      return;\n    }\n    console.log('index: ', index, 'level: ', level);\n    blockRefs.current[question[index]].style.backgroundColor = '#fff';\n    blockRefs.current[question[index]].style.opacity = 0.8;\n    setTimeout(() => {\n      blockRefs.current[question[index]].style.backgroundColor =\n        'rgb(0, 0, 102)';\n      blockRefs.current[question[index]].style.opacity = 0.15;\n      showQuestion(index + 1);\n    }, 500);\n  };\n\n  const startGame = (index) => {\n    showQuestion(index);\n  };\n\n  // function highlightSequence(index) {\n  //   if (index >= sequence.length) {\n  //     // If end of sequence is reached, allow player to start inputting sequence\n  //     enableInput();\n  //     return;\n  //   }\n\n  //   // Highlight tile\n  //   const tile = sequence[index];\n  //   tile.classList.add('selected');\n\n  //   // Wait for short delay and then unhighlight tile\n  //   setTimeout(() => {\n  //     tile.classList.remove('selected');\n\n  //     // Recursively highlight next tile in sequence\n  //     highlightSequence(index + 1);\n  //   }, 500);\n  // }\n\n  return (\n    <style.Squares>\n      <button onClick={() => startGame(0)}>start</button>\n      <style.SquareRow>{row1}</style.SquareRow>\n      <style.SquareRow>{row2}</style.SquareRow>\n      <style.SquareRow>{row3}</style.SquareRow>\n    </style.Squares>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}