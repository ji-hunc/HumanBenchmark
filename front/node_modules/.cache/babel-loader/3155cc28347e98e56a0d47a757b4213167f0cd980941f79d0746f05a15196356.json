{"ast":null,"code":"var _jsxFileName = \"/Users/jihun/workspace/humanbenchmark/src/pages/NumberMemoryTest/numberMemoryTest.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport React from 'react';\nimport * as style from './styles';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NumberMemoryTest() {\n  _s();\n  const navigate = useNavigate();\n  const [question, setQuestion] = useState('Click to Start!');\n  const [isTesting, setIsTesting] = useState(false);\n  const [isTimeOver, setIsTimeOver] = useState(false);\n  const [answer, setAnswer] = useState('');\n  const [level, setLevel] = useState(0);\n  const startGame = () => {\n    setQuestion('6');\n    setIsTesting(true);\n    setTimeout(() => setIsTimeOver(true), 1000);\n  };\n  const nextGame = () => {};\n  const updateAnswer = event => {\n    setAnswer(event.target.value);\n  };\n  const checkAnswer = event => {\n    console.log(answer);\n    if (question == answer) {\n      console.log('correct');\n      const sequence = getRandomSequence(level + 2);\n      console.log(sequence);\n      setQuestion(sequence);\n      setLevel(state => state + 1);\n      setIsTimeOver(false);\n      setTimeout(() => setIsTimeOver(true), 3000);\n    } else {\n      console.log('wrong answer');\n      setLevel(0);\n      setIsTesting(false);\n    }\n  };\n  const getRandomSequence = length => {\n    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let sequence = '';\n    for (let i = 0; i < length; i++) {\n      let randomNumber = numbers[Math.floor(Math.random() * numbers.length)];\n      sequence += randomNumber;\n    }\n    return sequence;\n  };\n  return /*#__PURE__*/_jsxDEV(style.Container, {\n    children: isTimeOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: updateAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkAnswer,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(style.Question, {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(NumberMemoryTest, \"N+j8FnwUUxaDHXDSE9+L4T31Mmg=\", false, function () {\n  return [useNavigate];\n});\n_c = NumberMemoryTest;\nvar _c;\n$RefreshReg$(_c, \"NumberMemoryTest\");","map":{"version":3,"names":["useState","React","style","useNavigate","jsxDEV","_jsxDEV","NumberMemoryTest","_s","navigate","question","setQuestion","isTesting","setIsTesting","isTimeOver","setIsTimeOver","answer","setAnswer","level","setLevel","startGame","setTimeout","nextGame","updateAnswer","event","target","value","checkAnswer","console","log","sequence","getRandomSequence","state","length","numbers","i","randomNumber","Math","floor","random","Container","children","display","flexDirection","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Question","_c","$RefreshReg$"],"sources":["/Users/jihun/workspace/humanbenchmark/src/pages/NumberMemoryTest/numberMemoryTest.js"],"sourcesContent":["import { useState } from 'react';\nimport React from 'react';\nimport * as style from './styles';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function NumberMemoryTest() {\n  const navigate = useNavigate();\n  const [question, setQuestion] = useState('Click to Start!');\n  const [isTesting, setIsTesting] = useState(false);\n  const [isTimeOver, setIsTimeOver] = useState(false);\n  const [answer, setAnswer] = useState('');\n  const [level, setLevel] = useState(0);\n\n  const startGame = () => {\n    setQuestion('6');\n    setIsTesting(true);\n    setTimeout(() => setIsTimeOver(true), 1000);\n  };\n\n  const nextGame = () => {};\n\n  const updateAnswer = (event) => {\n    setAnswer(event.target.value);\n  };\n\n  const checkAnswer = (event) => {\n    console.log(answer);\n    if (question == answer) {\n      console.log('correct');\n      const sequence = getRandomSequence(level + 2);\n      console.log(sequence);\n      setQuestion(sequence);\n      setLevel((state) => state + 1);\n      setIsTimeOver(false);\n      setTimeout(() => setIsTimeOver(true), 3000);\n    } else {\n      console.log('wrong answer');\n      setLevel(0);\n      setIsTesting(false);\n    }\n  };\n\n  const getRandomSequence = (length) => {\n    const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let sequence = '';\n\n    for (let i = 0; i < length; i++) {\n      let randomNumber = numbers[Math.floor(Math.random() * numbers.length)];\n      sequence += randomNumber;\n    }\n    return sequence;\n  };\n\n  return (\n    <style.Container>\n      {isTimeOver ? (\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          <input onChange={updateAnswer} />\n          <button onClick={checkAnswer}>Submit</button>\n        </div>\n      ) : (\n        <style.Question>{question}</style.Question>\n      )}\n    </style.Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}