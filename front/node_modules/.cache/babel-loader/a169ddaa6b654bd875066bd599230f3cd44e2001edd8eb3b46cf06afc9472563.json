{"ast":null,"code":"var _jsxFileName = \"/Users/jihun/workspace/humanbenchmark/src/pages/ReactionTimeTest/reactionTimeTest.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport React from 'react';\nimport * as style from './styles';\nimport ResultBox from '../../components/ResultBox/ResultBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReactionTimeTest() {\n  _s();\n  const [colorState, setColorState] = useState(1);\n  const [color, setColor] = useState('rgb(43, 135, 209)');\n  const [randomTimer, setRandomTimer] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [result, setResult] = useState('click to start!');\n  const [isTesting, setIsTesting] = useState(false);\n  const [tryCount, setTrycount] = useState('');\n  const [isFinishMeasure, setIsFinishMeasure] = useState(null);\n  const [totalScoreTime, setTotalScoreTime] = useState(0);\n  const [cursor, setCursor] = useState('default');\n  const red = 'rgb(206, 38, 54)';\n  const green = 'rgb(75, 219, 106)';\n  const blue = 'rgb(43, 135, 209)';\n  const max = 5000;\n  const min = 2000;\n  const changeToGreen = () => {\n    const randomNum = Math.random() * (max - min) + min;\n    const timerId = setTimeout(() => {\n      setColor(green);\n      setStartTime(Date.now());\n      setColorState(3);\n    }, 1);\n    setRandomTimer(timerId);\n  };\n  const handleClick = () => {\n    if (isFinishMeasure) {}\n    if (!isTesting) {\n      setIsTesting(true);\n      setTrycount(5);\n      setIsFinishMeasure(false);\n      setTotalScoreTime(0);\n      setPointerEvent('auto');\n    }\n    if (colorState == 1) {\n      // if blue\n      setColor(red); // to red\n      setColorState(2); // set to\n      changeToGreen();\n    } else if (colorState == 2) {\n      // if red\n      clearTimeout(randomTimer);\n      setResult('Too Fast!');\n      setColor(blue); // to green\n      setColorState(1); // set to blue\n    } else {\n      // if green\n      const score = Date.now() - startTime;\n      setResult(score + ' ms');\n      setTotalScoreTime(state => state + score);\n      if (tryCount - 1 == 0) {\n        setIsTesting(false);\n        setTrycount(-1);\n        setIsFinishMeasure(true);\n        setPointerEvent('default');\n      } else {\n        setTrycount(state => state - 1);\n      }\n      setColor(blue); // to blue\n      setColorState(1); // set to blue\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(style.Container, {\n    style: {\n      pointerEvents: pointerEvent,\n      backgroundColor: color\n    },\n    onMouseDown: () => handleClick(),\n    children: colorState == 1 ?\n    /*#__PURE__*/\n    // blue 화면일 때\n    _jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: isFinishMeasure ? /*#__PURE__*/_jsxDEV(ResultBox, {\n        testTitle: \"Reaction Time\",\n        testResult: totalScoreTime / 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(style.MainText, {\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), isTesting ? /*#__PURE__*/_jsxDEV(style.SubText, {\n          children: \"click to continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : colorState == 2 ?\n    /*#__PURE__*/\n    // red 화면일 떄\n    _jsxDEV(style.MainText, {\n      children: \"Wait for Green ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // green 화면일 때\n    _jsxDEV(style.MainText, {\n      children: \"Click!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(ReactionTimeTest, \"0rbHJjWf40RQ3AHYG+ZyGA7Dr44=\");\n_c = ReactionTimeTest;\nvar _c;\n$RefreshReg$(_c, \"ReactionTimeTest\");","map":{"version":3,"names":["useState","React","style","ResultBox","jsxDEV","_jsxDEV","ReactionTimeTest","_s","colorState","setColorState","color","setColor","randomTimer","setRandomTimer","startTime","setStartTime","result","setResult","isTesting","setIsTesting","tryCount","setTrycount","isFinishMeasure","setIsFinishMeasure","totalScoreTime","setTotalScoreTime","cursor","setCursor","red","green","blue","max","min","changeToGreen","randomNum","Math","random","timerId","setTimeout","Date","now","handleClick","setPointerEvent","clearTimeout","score","state","Container","pointerEvents","pointerEvent","backgroundColor","onMouseDown","children","testTitle","testResult","fileName","_jsxFileName","lineNumber","columnNumber","MainText","SubText","_c","$RefreshReg$"],"sources":["/Users/jihun/workspace/humanbenchmark/src/pages/ReactionTimeTest/reactionTimeTest.js"],"sourcesContent":["import { useState } from 'react';\nimport React from 'react';\nimport * as style from './styles';\nimport ResultBox from '../../components/ResultBox/ResultBox';\n\nexport default function ReactionTimeTest() {\n  const [colorState, setColorState] = useState(1);\n  const [color, setColor] = useState('rgb(43, 135, 209)');\n  const [randomTimer, setRandomTimer] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [result, setResult] = useState('click to start!');\n  const [isTesting, setIsTesting] = useState(false);\n  const [tryCount, setTrycount] = useState('');\n  const [isFinishMeasure, setIsFinishMeasure] = useState(null);\n  const [totalScoreTime, setTotalScoreTime] = useState(0);\n  const [cursor, setCursor] = useState('default');\n\n  const red = 'rgb(206, 38, 54)';\n  const green = 'rgb(75, 219, 106)';\n  const blue = 'rgb(43, 135, 209)';\n\n  const max = 5000;\n  const min = 2000;\n\n  const changeToGreen = () => {\n    const randomNum = Math.random() * (max - min) + min;\n    const timerId = setTimeout(() => {\n      setColor(green);\n      setStartTime(Date.now());\n      setColorState(3);\n    }, 1);\n    setRandomTimer(timerId);\n  };\n\n  const handleClick = () => {\n    if (isFinishMeasure) {\n    }\n    if (!isTesting) {\n      setIsTesting(true);\n      setTrycount(5);\n      setIsFinishMeasure(false);\n      setTotalScoreTime(0);\n      setPointerEvent('auto');\n    }\n    if (colorState == 1) {\n      // if blue\n      setColor(red); // to red\n      setColorState(2); // set to\n      changeToGreen();\n    } else if (colorState == 2) {\n      // if red\n      clearTimeout(randomTimer);\n      setResult('Too Fast!');\n      setColor(blue); // to green\n      setColorState(1); // set to blue\n    } else {\n      // if green\n      const score = Date.now() - startTime;\n      setResult(score + ' ms');\n      setTotalScoreTime((state) => state + score);\n      if (tryCount - 1 == 0) {\n        setIsTesting(false);\n        setTrycount(-1);\n        setIsFinishMeasure(true);\n        setPointerEvent('default');\n      } else {\n        setTrycount((state) => state - 1);\n      }\n      setColor(blue); // to blue\n      setColorState(1); // set to blue\n    }\n  };\n\n  return (\n    <style.Container\n      style={{ pointerEvents: pointerEvent, backgroundColor: color }}\n      onMouseDown={() => handleClick()}\n    >\n      {colorState == 1 ? ( // blue 화면일 때\n        <div style={{ color: 'white' }}>\n          {isFinishMeasure ? (\n            <ResultBox\n              testTitle=\"Reaction Time\"\n              testResult={totalScoreTime / 5}\n            />\n          ) : (\n            <div>\n              <style.MainText>{result}</style.MainText>\n              {isTesting ? (\n                <style.SubText>click to continue</style.SubText>\n              ) : null}\n            </div>\n          )}\n        </div>\n      ) : colorState == 2 ? ( // red 화면일 떄\n        <style.MainText>Wait for Green ...</style.MainText>\n      ) : (\n        // green 화면일 때\n        <style.MainText>Click!</style.MainText>\n      )}\n    </style.Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}